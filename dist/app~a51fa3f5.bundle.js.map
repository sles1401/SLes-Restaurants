{"version":3,"file":"app~a51fa3f5.bundle.js","mappings":";0YACA,8hGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAEA,IAAQC,EAAuDC,EAAAA,EAAAA,cAAxCC,EAAwCD,EAAAA,EAAAA,iBAAtBE,EAAsBF,EAAAA,EAAAA,kBAEzDG,GAAYC,EAAAA,EAAAA,IAAOL,EAAeE,EAAkB,CACtDI,QADsD,SAC9CC,GACJA,EAASC,kBAAkBL,EAAmB,CAAEM,QAAS,MAC5D,IAyBL,QAtB8B,CACpBC,cADoB,SACNC,GAAI,oGACfA,EADe,iEAINP,EAJM,uCAIKQ,IAAIT,EAAmBQ,IAJ5B,4CAKvB,EAEKE,iBARoB,WAQD,iHACPT,EADO,uCACIU,OAAOX,IADX,4CAExB,EACKY,cAXoB,SAWNC,GAAY,oGACvBA,EAAWC,eAAe,MADH,iEAIdb,EAJc,uCAIHc,IAAIf,EAAmBa,IAJpB,4CAK/B,EACKG,iBAjBoB,SAiBHR,GAAI,iHACTP,EADS,8CACSD,EAAmBQ,IAD5B,4CAE1B,gDCvBL,QALqB,CACjBS,WAAY,GAAF,OAAKnB,EAAAA,EAAAA,SAAL,SACVoB,OAAQ,SAACV,GAAD,gBAAWV,EAAAA,EAAAA,SAAX,mBAAqCU,EAArC,sPCHZ,4wNAcA,QAbMW,0MACF,WAA8BX,GAA9B,uFAC2BY,MAAMC,EAAAA,OAAoBb,IADrD,cACUc,EADV,yBAEWA,EAASC,QAFpB,oIAKA,sGAC2BH,MAAMC,EAAAA,YADjC,cACUC,EADV,gBAE+BA,EAASC,OAFxC,cAEUC,EAFV,yBAGWA,GAHX,wJANEL,mCCQN,QAVe,CACXM,SAAU,sCACVC,iBAAkB,QAClBC,YAAY,IAAIC,MAAOC,cACvBhC,cAAe,gCACfE,iBAAkB,EAClBC,kBAAmB,aACnB8B,kBAAmB,yFCOjBC,oCAAM,IAAIC,EAAAA,EAAI,CAChBC,OAAQC,SAASC,cAAc,oBAC/BC,OAAQF,SAASC,cAAc,qBAC/BE,QAASH,SAASC,cAAc,gBAChCG,KAAMJ,SAASC,cAAc,kBAEjCI,OAAOC,iBAAiB,cAAc,WAClCT,EAAIU,YACP,IAEDF,OAAOC,iBAAiB,QAAQ,WAC5BT,EAAIU,cACJC,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,KAAwB7C,EAAAA,EAAAA,kBAC3B","sources":["webpack://restaurant-apps/./src/scripts/data/favorite-restaurant-idb.js","webpack://restaurant-apps/./src/scripts/globals/api-endpoint.js","webpack://restaurant-apps/./src/scripts/data/restaurant-source.js","webpack://restaurant-apps/./src/scripts/globals/config.js","webpack://restaurant-apps/./src/scripts/index.js"],"sourcesContent":["import { openDB } from 'idb';\r\nimport CONFIG from '../globals/config';\r\n\r\nconst { DATABASE_NAME, DATABASE_VERSION, OBJECT_STORE_NAME } = CONFIG;\r\n\r\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n    upgrade(database) {\r\n        database.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\r\n    },\r\n});\r\n\r\nconst FavoriteRestaurantIdb = {\r\n    async getRestaurant(id) {\r\n        if (!id) {\r\n            return;\r\n        }\r\n        return (await dbPromise).get(OBJECT_STORE_NAME, id);\r\n    },\r\n\r\n    async getAllRestaurant() {\r\n        return (await dbPromise).getAll(OBJECT_STORE_NAME);\r\n    },\r\n    async putRestaurant(restaurant) {\r\n        if (!restaurant.hasOwnProperty('id')) {\r\n            return;\r\n        }\r\n        return (await dbPromise).put(OBJECT_STORE_NAME, restaurant);\r\n    },\r\n    async deleteRestaurant(id) {\r\n        return (await dbPromise).delete(OBJECT_STORE_NAME, id);\r\n    },\r\n};\r\n\r\nexport default FavoriteRestaurantIdb;\r\n","import CONFIG from './config';\r\n\r\nconst API_ENDPOINT = {\r\n    RESTAURANT: `${CONFIG.BASE_URL}/list`,\r\n    DETAIL: (id) => `${CONFIG.BASE_URL}/detail/${id}`,\r\n};\r\n\r\nexport default API_ENDPOINT;\r\n","import API_ENDPOINT from '../globals/api-endpoint';\r\n\r\nclass RestaurantDbSource {\r\n    static async detailRestaurant(id) {\r\n        const response = await fetch(API_ENDPOINT.DETAIL(id));\r\n        return response.json();\r\n    }\r\n\r\n    static async listRestaurant() {\r\n        const response = await fetch(API_ENDPOINT.RESTAURANT);\r\n        const responseJson = await response.json();\r\n        return responseJson;\r\n    }\r\n}\r\n\r\nexport default RestaurantDbSource;\r\n","const CONFIG = {\r\n    BASE_URL: 'https://restaurant-api.dicoding.dev',\r\n    DEFAULT_LANGUAGE: 'en-us',\r\n    CACHE_NAME: new Date().toISOString(),\r\n    DATABASE_NAME: 'restaurant-catalogue-database',\r\n    DATABASE_VERSION: 1,\r\n    OBJECT_STORE_NAME: 'restaurant',\r\n    WEB_SOCKET_SERVER: 'wss://movies-feed.dicoding.dev',\r\n};\r\n\r\nexport default CONFIG;\r\n","/* eslint-disable import/no-useless-path-segments */\n/* eslint-disable no-alert */\n/* eslint-disable no-use-before-define */\n/* eslint-disable import/no-cycle */\nimport WebSocketInitiator from './utils/websocket-initiator';\nimport CONFIG from './globals/config';\nimport App from './views/app';\nimport swRegister from '../scripts/utils/sw-register';\nimport 'lazysizes';\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit';\nimport '../styles/main.css';\nimport '../styles/responsive.css';\nimport 'regenerator-runtime'; /* for async await transpile */\n\nconst app = new App({\n    button: document.querySelector('#hamburgerButton'),\n    drawer: document.querySelector('#navigationDrawer'),\n    content: document.querySelector('#maincontent'),\n    main: document.querySelector('maincontent'),\n});\nwindow.addEventListener('hashchange', () => {\n    app.renderPage();\n});\n\nwindow.addEventListener('load', () => {\n    app.renderPage();\n    swRegister();\n    WebSocketInitiator.init(CONFIG.WEB_SOCKET_SERVER);\n});\n"],"names":["i","DATABASE_NAME","CONFIG","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","getRestaurant","id","get","getAllRestaurant","getAll","putRestaurant","restaurant","hasOwnProperty","put","deleteRestaurant","RESTAURANT","DETAIL","RestaurantDbSource","fetch","API_ENDPOINT","response","json","responseJson","BASE_URL","DEFAULT_LANGUAGE","CACHE_NAME","Date","toISOString","WEB_SOCKET_SERVER","app","App","button","document","querySelector","drawer","content","main","window","addEventListener","renderPage","swRegister","WebSocketInitiator"],"sourceRoot":""}